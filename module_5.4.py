# Задача "История строительства":
# Для решения этой задачи будем пользоваться решением к предыдущей задаче "Перегрузка операторов".
# В классе House создайте атрибут houses_history = [], который будет хранить названия созданных объектов.
# Правильней вписывать здание в историю сразу при создании объекта, тем более можно удобно обращаться к атрибутам класса используя ссылку на сам класс - cls.
# Дополните метод __new__ так, чтобы:
# Название объекта добавлялось в список cls.houses_history.
# Название строения можно взять из args по индексу.
# Цель: применить на практике знания о классах, объектах и их атрибутах.

class House:
    houses_history = []  #

    def __new__(cls, *args, **kwargs):
        cls.houses_history.append(args[0])
        return super().__new__(cls)

    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors

    def __str__(self):
        return f"Название: {self.name}, кол-во этажей: {self.number_of_floors}"

    def __del__(self):
        print(self.name, " снесён, но он останется в истории")


h1 = House("ЖК Эльбрус", 10)
print(House.houses_history)
h2 = House("ЖК Акация", 20)
print(House.houses_history)
h3 = House("ЖК Матрёшки", 20)
print(House.houses_history)
# Удаление объектов
del h2
del h3
print(House.houses_history, "- список зданий")

# В целом, оператор del не удаляет принудительно объект, а только освобождает указанную переменную
# и таким образом уменьшает счетчик ссылок объекта на 1. Если объект окажется сохранен где-то еще,
# то он не будет удален, и __del__ не сработает.
# Все __del__ точно сработают только при завершении программы, когда удалятся вообще все объекты
# (поэтому мы и видим удаление "ЖК Эльбрус" в конце, хотя del не вызывали.
